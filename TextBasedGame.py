# Nilaris Roberts


# Game art, define instructions
def display_intro():
    intro_art = """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Äbeep‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†ñ‚†í‚†í‚†¶‚°Ñ‚†Ä‚¢†‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†í‚†Ä‚††‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ã‚†Ç‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†û‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä
‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†®‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚°è‚†Ä‚£†‚†î‚†ã‚†Ä ‚†à‚°á‚†ê‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°£‚£∫‚£•‚£∂‚°Ä‚†Ä ‚†Ñ‚£∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ‚†ö‚†â‚†ò‚†Æ‚¢ç‚£ù‚°•‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†Ä‚†Äboop‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†ÅAlien Adventure Game‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚†Ä‚†Ä‚†Ä . .‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ã‚¢†‚†î‚†ä‚†Å‚†Ä‚†Ä‚†â‚†≥‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†é‚†Å‚£†‚†ä‚†Ä‚¢Ä‚°§‚†Ç‚†ä‚†â‚†â‚†â‚†ª‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚°ê‚†Å‚£†‚†ñ‚¢¶‚†Ä‚†∏‚°Ä‚†Ä‚†ô‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ñ‚†Ä‚†Ä‚†Ä‚°ú‚¢†‚†Ä‚†Ä‚†Ä‚¢ê‚†É‚†Ä‚°á‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢±‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢ä‚†ò‚°Ñ‚†Ä‚†Ä‚†ò‚¢Ü‚£Ä‚£Ä‚£†‚†É‚†Ä‚¢†‚†è‚†Ä‚†Ä‚†∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ü‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°¥‚†ä‚†Å‚†Ä‚†Ä‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä‚†Ä
‚†Ä‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†ò‚†™‚†ë‚†í‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†É ...Welcome to the Space Station!‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Å‚†à‚†à‚†à‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
"""
    print(intro_art)


# Call the display_intro function to show the artwork at the game start
display_intro()


# define instructions
def show_instructions():
    instructions = """
    üõ∞Ô∏è **Alien Adventure Game Instructions** üõ∞Ô∏è
    ------------------------------------------------
    Goal: Collect all the required items and access the escape pod **without encountering the alien**.

    **Move Commands:**
    - 'Go North', 'Go South', 'Go East', 'Go West' ‚Äî move between rooms.

    **Inventory Commands:**
    - 'get [item name]' ‚Äî add an item to your inventory.

    **Items to Collect:**
    1. Core and Generator (both in the **Engineering Room**).
       - Collect both items before leaving the room.
    2. Map
    3. Flashlight
    4. Supplies
    5. Key

    **Winning Condition:**
    - Collect **all items** before entering the Escape Pod Room.

    **General Tips:**
    - Type 'exit' anytime to quit the game.

    üöÄ The game is starting. You are in the Cryo-Chamber with no items..  Good luck, and watch out for the alien!** üöÄ
    """
    print(instructions)


# Show win art
def display_win():
    win_art = '''
‚¢∏‚°ü‚†≥‚¢§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†∏‚°á‚†Ä‚†Ä‚†ô‚†≤‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚°á‚†Ä‚£Ä‚†§‚¢ä‚†ú‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢ª‚†≠‚†Ñ‚†Ç‚†Å‚†Ä‚†Ä‚†à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£¶‚°§‚†§‚†§‚†∂‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†à‚¢Ø‚°â‚†â‚†Ä‚†Ä‚¢≥‚°Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†∏‚°Ü‚†Ä‚†Ä‚†Ä‚†∞‚£è‚¢π‚°Ñ‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†π‚£Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£†‚¢ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†π‚£è‚†π‚£Ñ‚°†‚†é‚†Å‚£ª‚£§‚£§‚£Ä‚£Ä‚°ò‚¢¶‚†Ä
‚†Ä‚¢Ä‚°¥‚°£‚†É‚¢ª‚°Ä‚†Ä‚†Ä‚£Ä‚†º‚£Ü‚†π‚£Ü‚£†‚†û‚†ã‚†≥‚£Ñ‚†Ä‚†Ä‚†â‚†â‚†Å
‚†Ä‚†Ä‚¢ª‚°Ä‚†Ä‚†Ä‚¢ª‚°â‚†Å‚†Ä‚£Ä‚£∏‚£ß‚†ò‚£á‚£†‚¢î‚°ø‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚°ø‚£û‚†ã‚†Å‚£Ä‚°¨‚£ß‚°ò‚£ø‚¢ã‚°Ä‚†ô‚†¢‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚£∏‚†É‚†π‚£∂‚†Ω‚†ñ‚¢ã‚†â‚†ã‚†Å‚†Ä‚¢à‚£±‚†Ä‚†π‚°Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢à‚†Ä‚¢Ä‚°Ä‚†ê‚°û‚†É‚†Ä‚†Ä‚£∑‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ß‚†ò‚¢¥‚†Å‚†ë‚¢§‚†á‚†Ä‚¢∞‚†≤‚°ø‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚£Ä‚°û‚†ì‚†¶‚°Ñ‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚¢π‚£¥‚†É‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
    '''
    print(win_art)
    print("Congrats! You've avoided the alien and collected all items. You Win!! ")


# Show loss art
def display_loss():
    loss_art = '''
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°§‚†∂‚†í‚†í‚†í‚†í‚†≤‚†¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°§‚†ñ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†ê‚†§‚£Ñ‚†â‚†ì‚¢¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†£‚£Ä‚†Ä‚†à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚†è‚†à‚†Å‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Å‚†â‚†â‚†Å‚†Ä‚†Ä‚¢Ä‚°†‚†Ä‚£Ñ‚†Ä‚†Ä‚†ò‚¢ß‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†á‚¢†‚†Ä‚†Ä‚†Ä‚†í‚†Ä‚†à‚†í‚†Ä‚†Ä‚†Ä‚††‚†§‚†Ü‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚¢Ü‚†à‚£á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ñ‚¢∏
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢Ä‚£∏
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ü‚£º‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°Ä‚††‚†§‚¢Ñ‚£Ä‚†§‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°é‚£û‚°è
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢ø‚£á‚£§‚†Ñ‚†Ä‚†Ä‚¢Ä‚°â‚†â‚†ì‚†í‚†í‚†í‚†ã‚†â‚°Å‚†Ä‚†Ä‚††‚¢§‚£Ä‚£ø‚¢ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ü‚£â‚°§‚¢§‚¢§‚¢§‚£Ä‚°â‚†≤‚°Ä‚†Ä‚†Ä‚†Ä‚°¥‚†ä‚£Å‚°†‚°§‚°§‚†§‚£à‚°ª‚°ü‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Å‚£ø‚£ø‚†õ‚†õ‚¢ª‚¢∑‚£Ø‚°Ç‚†ò‚†Ä‚†Ä‚†ö‚¢ê‚£Æ‚†ø‚†ø‚£ü‚£ø‚£ø‚£ø‚°é‚£ø‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£¶‚°ò‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚¢Ä‚£æ‚£∑‚£§‚£∂‚£ø‚£ø‚£ø‚°è‚£†‚°è‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£µ‚°ô‚¢Ø‚£ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢∏‚¢ø‚£ø‚£ø‚°ø‚£ü‚°ø‚¢ã‚£º‚†ü‚†Ä‚†Ä
‚¢Ä‚£†‚£Ä‚†Ä‚†Ä‚¢†‚†ñ‚¢≤‚°Ä‚†Ä‚†Ä‚†à‚¢ª‚£Ñ‚†à‚†â‚†ø‚†ø‚†õ‚†ã‚†Ä‚†Ä‚†ò‚†õ‚†õ‚†ø‚†è‚†â‚¢Ä‚°Ω‚†ã‚†Ä‚†Ä‚†Ä
‚¢∏‚°Ö‚†π‚°Ñ‚†Ä‚¢∏‚°Ñ‚¢∏‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ë‚°Ä‚†Ä‚†Ä‚†Ä‚†æ‚†ñ‚†∞‚°æ‚°Ü‚†Ä‚†Ä‚†Ä‚£ú‚°Ω‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢≥‚°Ñ‚¢∑‚†Ä‚¢∞‚†É‚¢ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚°∑‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£º‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†à‚¢ß‚°à‚£ß‚¢∏‚°Ä‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ß‚†à‚†â‚†≠‚†≠‚†ç‚¢Å‚¢∞‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ò‚£á‚†à‚°ø‚†Ä‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£∑‚£Ñ‚†Ä‚†Å‚¢Ä‚£º‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚°¥‚¢∫‚†Ø‚†§‚†§‚†ñ‚¢∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ø‚°∑‚¢∂‚£ø‚¢ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†ª‚°û‚†≥‚¢∂‚£æ‚°∂‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚¢ø‚†Å‚†Ä‚°ù‚£æ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ô‚¢¶‚†¥‚†Å‚†Ä‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£†‚†§‚†æ‚¢Å‚°Ä‚£á‚¢†‚†á‚°Ö‚†ª‚†¶‚£Ñ‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚¢∑‚£ú‚†í‚†≤‚£è‚†Ä‚†Ä‚°¥‚°ø‚†Ä‚†Ä‚†à‚†Å‚†í‚†ã‚†Ä‚†à‚†â‚†Ä‚†ò‚†í‚†ñ‚†Å‚†Ä‚†Ä‚†©‚£≥‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°ê‚¢ß‚¢ª‚†Ä‚†Ä‚£∑‚†Å‚†Ä‚¢∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≤‚°∂‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢ß‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†à‚£ß‚†Ä‚£ü‚†Ä‚†Ä‚£®‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†Ä‚†Ä‚¢©‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚†Ä‚†Ä‚†ò‚°æ‚†Å‚†ê‚£æ‚°ü‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚£ø‚†Å‚†Ä‚†â‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£Ü‚†Ä‚†Ä‚†∏‚°Ä‚¢∞‚£ø‚†Å‚¢ø‚¢Ñ‚°Ä‚†Ä‚†Ä‚†¥‚†∑‚†Ñ‚†Ä‚†Ä‚¢Ä‚£æ‚°è‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ø‚£Ü‚†Ä‚†Ä‚¢π‚£ü‚°è‚†Ä‚¢∏‚†¶‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚††‚£ß‚£ø‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ú‚¢¶‚£Ä‚°ú‚°û‚†Ä‚†Ä‚¢∏‚°ì‚¢Ä‚°Å‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°Ä‚†ê‚£ø‚°á‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢∂‚£•‚°Ω‚†Å‚†Ä‚†Ä‚¢∏‚£Ö‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£§‚£à‚°ø‚¢∑‚°Ä‚£Ä‚£∏‚†á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä
    '''
    print(loss_art)
    print("ALIEN HIVE!! You've encountered the alien! Game over.")


# rubric 3: begin developing a main function code
# Show player status
def showStatus(currentRoom, inventory, rooms):
    print(f"\nYou are currently in the {currentRoom}.")
    print(f"Inventory: {inventory}")

    room_items = rooms[currentRoom]["items"]

    if room_items:  # Check if there are items in the room
        if isinstance(room_items, list):  # Multiple items in the room
            print("You see the following items:", ", ".join(room_items))
            for item in room_items:
                ascii_items_art(item)  # Display ASCII art for each item
        else:  # Single item in the room
            if room_items.lower() == "supplies":
                print(f"You see the {room_items}.")  # Use 'the' for supplies
            else:
                print(f"You see a {room_items}.")
            ascii_items_art(room_items)
    else:
        print("There is nothing here.")


# Movement function
def move(direction, currentRoom, rooms):
    if direction in rooms[currentRoom]["connections"]:
        return rooms[currentRoom]["connections"][direction]
    else:
        available_directions = ", ".join(rooms[currentRoom]["connections"].keys())
        print(f"Invalid direction! You can move in the following directions: {available_directions}")
        return currentRoom  # Stay in the same room if move is invalid

def collect_item(item_name, current_room, inventory, rooms):
    """Attempt to collect an item from the current room."""
    room_items = rooms[current_room]["items"]

    if isinstance(room_items, list) and item_name in room_items:
        inventory.append(item_name)
        room_items.remove(item_name)  # Remove collected item from the list
        print(f"You have collected the {item_name}.")
        ascii_items_art(item_name)  # Display the ASCII art for the item
    elif room_items == item_name:
        inventory.append(item_name)
        rooms[current_room]["items"] = None  # Remove the item from the room
        print(f"You have collected the {item_name}.")
        ascii_items_art(item_name)  # Display the ASCII art for the item
    else:
        print(f"There is no {item_name} in this room.")

def ascii_items_art(item_name):
    art_dict = {
        "Map": '''
       ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£ê‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚°§‚£ñ‚£õ‚¢•‚†Ä‚†Ä‚†ò‚†Ä‚†Ä‚†ò‚£ø‚†â‚†Å‚†∏‚†ì‚†Ñ‚†Ä‚†Ä‚†Ä‚†á‚†í‚†â‚†ô‚£æ‚†ª‚¢¶‚°â‚†Ç‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢π‚£Ñ‚°π‚¢ú‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚¢ª‚£Ü‚°î‚£≠‚†Ü‚†Ä‚†Ä‚†Ä
‚¢∏‚†Ä‚†Ä‚°º‚†Ä‚†Ä‚†Ä‚†ÄSpaceCraft Map‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚°Ω‚£ç‚†ô‚¢∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚°á‚°á‚†Ä‚†Ä‚†Ä‚†Ä|Legend:|         *      ‚°á‚¢∞
 ‚°á‚°á     | * = You|‚†Ä‚†Ä ‚°Ω‚£ç‚†ô‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢∞‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚†Ä‚†Ä‚†Ä‚°Ω‚£ç‚†ô‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä..‚†Ä.  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚¢ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†∏‚£∂‚£∑‚°ß‚†§‚°Ñ‚£Ä‚°ü‚†ß‚†§‚†§‚¢§‚†§‚¢§‚°§‚†§‚¢¥‚¢ø‚£â‚°ê‚†¶‚†§‚°Ø‚†¶‚¢Ñ‚£Ä‚°Ä‚¢Ä‚£ø‚£Ü‚£º‚†Ä‚†Ä‚†Ä‚†Ä

        '''
        ,
        "Core": '''
    ‚°¥‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚°¥‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°é‚†Ä‚†É‚¢Ä‚¢î‚£§‚†é‚†ö‚†ª‚£Ü‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†à‚†™‚£Ä‚£µ‚£ø‚£Ö‚†Ä‚†Ä‚£Ä‚†Ä‚¢û‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚°ó‚£†‚†Ñ‚†ô‚¢Ä‚¢®‚¢ø‚°ü‚†Ç‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢∑‚£∑‚£î‚£Å‚°®‚†´‚°Ä‚†Å‚£†
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°≠‚†ø‚†ã‚°Ä‚†Ä‚°à‚¢≤‚†î
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†™‚£°‚£®‚£Ä‚†ú‚†Å‚†Ä

        '''
        ,
        "Generator": '''
         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä             ‚£Ä‚£º‚¢ø‚°Ñ‚†Ä‚†Ä‚†Ä
‚¢Ä‚£Ä‚£ø‚†â‚£â‚£â‚£â‚£â‚°â‚£â‚°â‚¢â‚£æ‚¢£‚°¨‚¢ø‚£Ñ‚†Ä‚†Ä
‚¢∏‚£ø‚£ø‚†Ä‚£â‚£â‚£â‚°â‚†Å‚†ô‚¢Å‚°ø‚†É‚£ª‚†ó‚†Ä‚¢ª‚£Ü‚†Ä
‚¢∏‚£ø‚£ø‚†Ä‚¢∫‚£∂‚£æ‚°Ç‚†Ä‚†Ä‚†ø‚†∑‚†∂‚†∑‚†∂‚¢∂‚†∂‚†ø‚†Ü
‚†à‚†õ‚£ø‚°Ä‚†ò‚†õ‚†õ‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚†Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚¢ª‚°ø‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚£ø‚¢ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

        '''
        ,
        "Flashlight": '''‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£ø‚£ø‚£ª‚°Ñ
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£§‚°æ‚£ø‚£Ø‚¢ø‚£∑‚°ø‚†ü‚†Ä
‚†Ä‚£†‚£¥‚£∂‚£∂‚£∂‚°ø‚£ø‚£ª‚£Ω‚£Ω‚£∑‚°ø‚†õ‚†Å‚†Ä‚†Ä‚†Ä
‚¢∏‚°á‚£¥‚£¨‚†ø‚£ª‚£π‚£ø‚£ø‚°ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢Ø‚¢∂‚¢í‚£ß‚¢π‚£ø‚£ø‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†à‚†ª‚£é‚£±‚£π‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
        '''
        ,
        "Supplies": '''
        ‚£†‚£Ä‚£Ä‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°†‚†í‚†í‚†ê‚†í‚†í‚†í‚†ì‚†í‚†í‚†ö‚†ì‚†í‚†í‚†í‚†í‚†í‚¢Ñ
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°å‚†Ä‚¢∞‚°Ü‚†à‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ö‚†ø‚¢ø‚°ø‚†ø‚¢†‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚¢§‚£ò‚£ì‚°§‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏
‚¢á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏
 ‚†Ä‚†ê‚†í‚†í‚†í‚†ì‚†í‚†í‚†ö‚†ì‚†í‚†í‚†í‚†í‚†í‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

        '''
        ,
        "Key": '''

  ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä      ‚°Ä‚£Ä‚†â‚†£‚°Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†∞‚°Ñ‚†ê‚†∫‚£•‚†Ä‚†±‚†Ä‚†Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∫‚°Ä‚†Ä‚°Ñ‚†Ä‚°Ä‚†ö‚†Ä‚£¥‚†Ü
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¨‚†û‚¢¶‚°Ä‚£Ä‚°Ä‚£Ä‚¢û‚†á‚†Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°æ‚†Å‚¢Ä‚°æ‚†õ‚†õ‚†õ‚†õ‚†Ä‚†Ä‚†Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢û‚†Å‚¢Ä‚°∞‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚†Ä‚†Ä‚£†‚†ñ‚†ô‚¢¥‚°ï‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢Ä‚°¥‚†ã‚†Å‚°†‚††‚†è‚†≤‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†≥‚¢∂‚¢§‚¢é‚†Ä‚†ê‚£¢‚°∂‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢õ‚¢¶‚†Ü‚†Ä‚†Ä‚†Ä      

        '''

    }
    # Check if the item has ASCII art
    if item_name in art_dict:
        print("\n" + "-" * 50)  # Add a separator for better clarity
        print(art_dict[item_name]) # Display ASCII art
        print("-" * 50)  # Another separator
    else:
        print(f"No ASCII art available for {item_name}.")

# Collect Item Function
def collect_item(item_name, currentRoom, inventory, rooms):
    """Handles item collection logic."""
    room_items = rooms[currentRoom]["items"]

    if isinstance(room_items, list):  # Multiple items in the room
        if item_name in room_items:
            inventory.append(item_name)
            room_items.remove(item_name)
            print(f"You have collected the {item_name}.")
            ascii_items_art(item_name)
        else:
            print(f"{item_name} is not in this room!")
    elif room_items == item_name:  # Only one item in the room
        inventory.append(item_name)
        rooms[currentRoom]["items"] = None
        print(f"You have collected the {item_name}.")
        ascii_items_art(item_name)
    else:
        print(f"{item_name} is not in this room!")

# rubric: decision branching to handle different commands and control the program flow
# Main game loop
def main():
    currentRoom = "Cryo-Chamber"
    inventory = []
    alienRoom = "Alien Hive Room"
    itemsCollected = 0
    totalItems = 6  # Total items needed to win
    gameOver = False

    # Rooms dictionary: Combining items and connections
    rooms = {
        "Cryo-Chamber": {"items": None, "connections": {"North": "Navigation Room", "East": "Control Room", "South": "Living Quarters", "West": "Storage Room"}},
        "Navigation Room": {"items": "Map", "connections": {"South": "Cryo-Chamber", "East": "Engineering Room"}},
        "Engineering Room": {"items": ["Core", "Generator"], "connections": {"West": "Navigation Room"}},
        "Living Quarters": {"items": "Flashlight", "connections": {"North": "Cryo-Chamber", "East": "Escape Pod Room"}},
        "Storage Room": {"items": "Supplies", "connections": {"East": "Cryo-Chamber"}},
        "Control Room": {"items": "Key", "connections": {"West": "Cryo-Chamber", "North": "Alien Hive Room"}},
        "Alien Hive Room": {"items": None, "connections": {"South": "Control Room"}},
        "Escape Pod Room": {"items": None, "connections": {"West": "Living Quarters"}}
    }

    # Show instructions
    show_instructions()

    # Game loop
    while not gameOver:
        showStatus(currentRoom, inventory, rooms)

        command = input("Enter your move (go [direction], get [item], or type 'exit' to quit): ").split()
        if not command:
            print("You must enter a command!")
            continue

        if command[0].lower() == "exit":
            print("Thanks for playing! Goodbye.")
            break

        elif command[0].lower() == "go":
            if len(command) < 2:
                print("You must specify a direction! (e.g., 'go North')")
                continue
            direction = command[1].capitalize()  # Normalize input direction
            currentRoom = move(direction, currentRoom, rooms)  # Update room based on direction

        elif command[0].lower() == "get":
            if len(command) < 2:
                print("You must specify an item to collect!")
                continue

            item = command[1].capitalize()
            room_items = rooms[currentRoom]["items"]

            # Check if the item is already in the inventory
            if item in inventory:
                print(f"You've already collected the {item}.")
                continue

            # Handle case for multiple items in the room (like Engineering Room)
            if isinstance(room_items, list):
                if item in room_items:
                    inventory.append(item)
                    itemsCollected += 1
                    room_items.remove(item)  # Remove collected item from the room
                    print(f"You have collected the {item}.")
                    ascii_items_art(item)  # Display ASCII art for the collected item
                else:
                    print(f"{item} is not in this room!")

            # Handle case where only one item is in the room
            elif room_items == item:
                inventory.append(item)
                itemsCollected += 1
                rooms[currentRoom]["items"] = None  # Remove item from room after collecting it
                print(f"You have collected the {item}.")
                ascii_items_art(item)  # Display ASCII art for the collected item
            else:
                print(f"{item} is not in this room!")

        # Win or lose condition (after item collection logic)
        if itemsCollected == totalItems and currentRoom == "Escape Pod Room":
            display_win()
            gameOver = True
        elif currentRoom == alienRoom:
            display_loss()
            gameOver = True


# Run if meets all rubric requirements
if __name__ == "__main__":
    main()
